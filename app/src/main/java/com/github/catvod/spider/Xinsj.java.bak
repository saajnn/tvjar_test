//
// Decompiled by Jadx (from NP Manager)
//

import android.content.Context;
import android.text.TextUtils;
import com.github.catvod.crawler.Spider;
import com.github.catvod.crawler.SpiderDebug;
import com.github.catvod.spider.merge.M;
import com.github.catvod.spider.merge.W;
import com.github.catvod.spider.merge.WU;
import com.github.catvod.spider.merge.cl;
import com.github.catvod.spider.merge.jC;
import com.github.catvod.spider.merge.uT;
import com.github.catvod.utils.Misc;
import com.github.catvod.utils.okhttp.OkHttpUtil;
import java.net.URLEncoder;
import java.util.AbstractCollection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import okhttp3.OkHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class Xinsj extends Spider {
    private static String KJ = "https://www.6080dy3.com/";
    private final Pattern Gc;
    private final Pattern M;
    private JSONObject SN;
    private Pattern N = Pattern.compile("/vodtype/(\\d+).html");
    private Pattern i = Pattern.compile("/vodshow/(\\S+).html");
    private final Pattern t0 = Pattern.compile("(?<=url\":\\s\").*?(?=\")");
    private Pattern tF = Pattern.compile("/video/(\\d+).html");
    private JSONObject yq;
    private Pattern zH = Pattern.compile("/vplay/(\\d+)-(\\d+)-(\\d+).html");

    public String playerContent(String str, String str2, List<String> list) {
        Xinsj xinsj = this;
        String d = "User-Agent";
        String d2 = "url";
        String str3 = "";
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put(d, " Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.62 Safari/537.36");
            jSONObject.put("Connection", " close");
            jSONObject.put("Icy-MetaData", " 1");
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(KJ);
            stringBuilder.append("/vplay/");
            stringBuilder.append(str2);
            stringBuilder.append(".html");
            String stringBuilder2 = stringBuilder.toString();
            uT OB = cl.tF(OkHttpUtil.string(stringBuilder2, xinsj.getHeaders(stringBuilder2))).OB("script");
            JSONObject jSONObject2 = new JSONObject();
            int i = 0;
            while (i < OB.size()) {
                String trim = ((jC) OB.get(i)).Hj().trim();
                if (trim.startsWith("var player_")) {
                    JSONObject jSONObject3 = new JSONObject(trim.substring(trim.indexOf(123), trim.lastIndexOf(125) + 1));
                    String string = jSONObject3.getString(d2);
                    boolean contains = jSONObject3.getString(d2).contains(".m3u8");
                    String d3 = "playUrl";
                    String d4 = "parse";
                    if (!contains) {
                        if (!jSONObject3.getString(d2).contains(".mp4")) {
                            JSONObject jSONObject4 = xinsj.yq.getJSONObject(jSONObject3.getString("from"));
                            String string2 = jSONObject4.getString("show");
                            boolean contains2 = string2.contains("专享");
                            String d5 = "header";
                            Object d6 = "key";
                            String d7 = "time";
                            String str4 = string;
                            string = "body>script";
                            String str5 = string2;
                            string2 = "Referer";
                            String str6 = d5;
                            d5 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.62 Safari/537.36";
                            HashMap hashMap;
                            Matcher matcher;
                            Object group;
                            HashMap hashMap2;
                            Object obj;
                            String str7;
                            if (contains2) {
                                StringBuilder stringBuilder3 = new StringBuilder();
                                stringBuilder3.append(jSONObject4.getString(d4));
                                stringBuilder3.append(jSONObject3.getString(d2));
                                stringBuilder2 = stringBuilder3.toString();
                                hashMap = new HashMap();
                                hashMap.put(d, d5);
                                hashMap.put(string2, KJ);
                                AbstractCollection OB2 = cl.tF(OkHttpUtil.string(stringBuilder2, hashMap)).OB(string);
                                i = 0;
                                while (i < OB2.size()) {
                                    trim = ((jC) OB2.get(i)).Hj().trim();
                                    Matcher matcher2 = xinsj.t0.matcher(trim);
                                    Object group2 = matcher2.find() ? matcher2.group(0) : str3;
                                    Matcher matcher3 = xinsj.M.matcher(trim);
                                    Object group3 = matcher3.find() ? matcher3.group(0) : str3;
                                    matcher = xinsj.Gc.matcher(trim);
                                    group = matcher.find() ? matcher.group(0) : str3;
                                    hashMap2 = new HashMap();
                                    hashMap2.put(d2, group2);
                                    hashMap2.put(d7, group3);
                                    hashMap2.put(d6, group);
                                    OkHttpClient defaultClient = OkHttpUtil.defaultClient();
                                    string2 = "https://jx2.idcdr.com:443/m3u81/API.php";
                                    HashMap hashMap3 = new HashMap();
                                    AbstractCollection abstractCollection = OB2;
                                    hashMap3.put(d, " Mozilla/5.0 (Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.62 Safari/537.36");
                                    obj = d6;
                                    hashMap3.put("Origin", "https://jx2.idcdr.com");
                                    OkHttpUtil.post(defaultClient, string2, hashMap2, hashMap3, new 2(jSONObject2));
                                    jSONObject2.put(d4, 0);
                                    jSONObject2.put(d3, str3);
                                    str7 = str6;
                                    jSONObject2.put(str7, jSONObject.toString());
                                    i++;
                                    OB2 = abstractCollection;
                                    str6 = str7;
                                    d6 = obj;
                                }
                            } else {
                                obj = d6;
                                str7 = str6;
                                if (str5.contains("蓝光专线①")) {
                                    StringBuilder stringBuilder4 = new StringBuilder();
                                    stringBuilder4.append(jSONObject4.getString(d4));
                                    stringBuilder4.append(jSONObject3.getString(d2));
                                    stringBuilder2 = stringBuilder4.toString();
                                    hashMap = new HashMap();
                                    hashMap.put(d, d5);
                                    hashMap.put(string2, KJ);
                                    OB = cl.tF(OkHttpUtil.string(stringBuilder2, hashMap)).OB(string);
                                    int i2 = 0;
                                    while (i2 < OB.size()) {
                                        string = ((jC) OB.get(i2)).Hj().trim();
                                        matcher = xinsj.t0.matcher(string);
                                        group = matcher.find() ? matcher.group(0) : str3;
                                        Matcher matcher4 = xinsj.M.matcher(string);
                                        d6 = matcher4.find() ? matcher4.group(0) : str3;
                                        Matcher matcher5 = xinsj.Gc.matcher(string);
                                        Object group4 = matcher5.find() ? matcher5.group(0) : str3;
                                        LinkedHashMap linkedHashMap = new LinkedHashMap();
                                        linkedHashMap.put(d2, group);
                                        linkedHashMap.put(d7, d6);
                                        group = obj;
                                        linkedHashMap.put(group, group4);
                                        OkHttpClient defaultClient2 = OkHttpUtil.defaultClient();
                                        str7 = "https://jx1.idcdr.com/m3u8/API.php";
                                        hashMap2 = new HashMap();
                                        hashMap2.put(d, " Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/537.36  (KHTML, like Gecko) Version/13.0 Mobile/15E148 Safari/537.36");
                                        OkHttpUtil.post(defaultClient2, str7, linkedHashMap, hashMap2, new 3(jSONObject2));
                                        jSONObject2.put(d4, 0);
                                        jSONObject2.put(d3, str3);
                                        string = str6;
                                        jSONObject2.put(string, jSONObject.toString());
                                        i2++;
                                        xinsj = this;
                                        str6 = string;
                                        obj = group;
                                    }
                                } else if (Misc.isVip(str4)) {
                                    jSONObject2.put("jx", "1");
                                    jSONObject2.put(d2, str4);
                                    jSONObject2.put(d4, 1);
                                    jSONObject2.put(d3, str3);
                                }
                            }
                            return jSONObject2.toString();
                        }
                    }
                    d = string;
                    jSONObject2.put(d4, 0);
                    jSONObject2.put(d3, str3);
                    jSONObject2.put(d2, d);
                    return jSONObject2.toString();
                }
                i++;
                xinsj = this;
            }
            return jSONObject2.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return str3;
        }
    }

    protected final HashMap<String, String> getHeaders(String str) {
        str = "method";
        String d = "GET";
        String d2 = "Upgrade-Insecure-Requests";
        String d3 = "1";
        HashMap yq = M.yq(str, d, d2, d3);
        yq.put("DNT", d3);
        yq.put("User-Agent",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.62 Safari/537.36");
        yq.put("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        yq.put("Accept-Language", "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2");
        return yq;
    }

    public Xinsj() {
        Pattern.compile(""token": *"([^"]*)"");
        this.Gc = Pattern.compile("(?<=key":\s").*?(?=")");
        this.M = Pattern.compile("(?<=time":\s").*?(?=")");
    }

    public String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        HashMap<String, String> hashMap2 = hashMap;
        String d = "div.module-item-cover > div.module-item-pic > a";
        String d2 = "-";
        String str3 = "";
        try {
            String i;
            int parseInt;
            int i2;
            String tF;
            r5 = new String[12];
            int i3 = 0;
            r5[0] = str3;
            int i4 = 1;
            r5[1] = str3;
            r5[2] = str3;
            r5[3] = str3;
            r5[4] = str3;
            r5[5] = str3;
            r5[6] = str3;
            r5[7] = str3;
            r5[8] = str3;
            r5[9] = str3;
            r5[10] = str3;
            r5[11] = str3;
            r5[0] = str;
            r5[8] = str2;
            if (hashMap2 != null && hashMap.size() > 0) {
                for (String i5 : hashMap.keySet()) {
                    r5[Integer.parseInt(i5)] = URLEncoder.encode((String) hashMap2.get(i5));
                }
            }
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(KJ);
            stringBuilder.append("/vodshow/");
            stringBuilder.append(TextUtils.join(d2, r5));
            stringBuilder.append(".html");
            String stringBuilder2 = stringBuilder.toString();
            stringBuilder2 = OkHttpUtil.string(stringBuilder2, getHeaders(stringBuilder2));
            WU zH = W.zH(stringBuilder2);
            JSONObject jSONObject = new JSONObject();
            uT OB = zH.OB("div[id=page]");
            int size = OB.size();
            String d3 = "href";
            if (size == 0) {
                parseInt = Integer.parseInt(str2);
                i2 = parseInt;
            } else {
                size = 0;
                while (size < OB.size()) {
                    if (((jC) OB.get(size)).x("a") == null) {
                        size++;
                    } else {
                        i5 = zH.OB("span.page-current").i();
                        tF = zH.OB("div[id=page] a").tF().tF(d3);
                        parseInt = Integer.parseInt(i5);
                        Matcher matcher = this.i.matcher(tF);
                        if (matcher.find()) {
                            int i6 = parseInt;
                            parseInt = Integer.parseInt(matcher.group(1).split(d2)[8]);
                            i2 = i6;
                        } else {
                            i2 = parseInt;
                            parseInt = 0;
                        }
                    }
                }
                i2 = -1;
                parseInt = 0;
            }
            JSONArray jSONArray = new JSONArray();
            if (!stringBuilder2.contains("没有找到您想要的结果哦")) {
                uT OB2 = zH.OB("div.module-items>div");
                while (i3 < OB2.size()) {
                    jC jCVar = (jC) OB2.get(i3);
                    tF = jCVar.x(d).tF("title");
                    String tF2 = jCVar.x("div.module-item-cover > div.module-item-pic > img").tF("data-src");
                    jC x = jCVar.x("div.module-item-text");
                    Object s0 = x != null ? x.s0() : str3;
                    Matcher matcher2 = this.tF.matcher(jCVar.x(d).tF(d3));
                    if (matcher2.find()) {
                        String group = matcher2.group(i4);
                        JSONObject jSONObject2 = new JSONObject();
                        jSONObject2.put("vod_id", group);
                        jSONObject2.put("vod_name", tF);
                        jSONObject2.put("vod_pic", tF2);
                        jSONObject2.put("vod_remarks", s0);
                        jSONArray.put(jSONObject2);
                    }
                    i3++;
                    i4 = 1;
                }
            }
            jSONObject.put("page", i2);
            jSONObject.put("pagecount", parseInt);
            jSONObject.put("limit", 48);
            jSONObject.put("total", parseInt <= 1 ? jSONArray.length() : parseInt * 48);
            jSONObject.put("list", jSONArray);
            return jSONObject.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return str3;
        }
    }

    public String detailContent(List<String> list) {
        Throwable e;
        Xinsj xinsj = this;
        List<String> list2 = list;
        String d = "-";
        String d2 = "show";
        String d3 = "$$$";
        String str = "";
        String str2;
        try {
            JSONObject jSONObject;
            String str3;
            uT OB;
            int i;
            String stringBuilder;
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append(KJ);
            stringBuilder2.append("/video/");
            stringBuilder2.append((String) list2.get(0));
            stringBuilder2.append(".html");
            String stringBuilder3 = stringBuilder2.toString();
            WU zH = W.zH(OkHttpUtil.string(stringBuilder3, xinsj.getHeaders(stringBuilder3)));
            JSONObject jSONObject2 = new JSONObject();
            JSONObject jSONObject3 = new JSONObject();
            String tF = zH.x("div.module-item-pic > img").tF("data-src");
            String s0 = zH.x("div.video-info-header > h1.page-title").s0();
            String i2 = zH.OB("div.video-info-content span").i();
            AbstractCollection OB2 = zH.OB("div.video-info-main span.video-info-itemtitle");
            Object obj = str;
            String str4 = obj;
            String str5 = str4;
            String str6 = str5;
            String str7 = str6;
            String str8 = str7;
            int i3 = 0;
            while (i3 < OB2.size()) {
                jC jCVar = (jC) OB2.get(i3);
                AbstractCollection abstractCollection = OB2;
                String s02 = jCVar.s0();
                str2 = str;
                try {
                    if (s02.equals("分类：")) {
                        obj = jCVar.LY().s0();
                    } else if (s02.equals("上映：")) {
                        str4 = jCVar.LY().s0();
                    } else if (s02.equals("地区：")) {
                        str5 = jCVar.LY().s0();
                    } else if (s02.equals("更新：")) {
                        str6 = jCVar.LY().s0();
                    } else {
                        boolean equals = s02.equals("导演：");
                        jSONObject = jSONObject2;
                        String d4 = ",";
                        str3 = d3;
                        d3 = "a";
                        ArrayList arrayList;
                        if (equals) {
                            arrayList = new ArrayList();
                            OB = jCVar.Cu().OB(d3);
                            for (i = 0; i < OB.size(); i++) {
                                arrayList.add(((jC) OB.get(i)).s0());
                            }
                            str8 = TextUtils.join(d4, arrayList);
                        } else if (s02.equals("主演：")) {
                            arrayList = new ArrayList();
                            OB = jCVar.Cu().OB(d3);
                            for (i = 0; i < OB.size(); i++) {
                                arrayList.add(((jC) OB.get(i)).s0());
                            }
                            str7 = TextUtils.join(d4, arrayList);
                        }
                        i3++;
                        OB2 = abstractCollection;
                        str = str2;
                        jSONObject2 = jSONObject;
                        d3 = str3;
                    }
                    str3 = d3;
                    jSONObject = jSONObject2;
                    i3++;
                    OB2 = abstractCollection;
                    str = str2;
                    jSONObject2 = jSONObject;
                    d3 = str3;
                } catch (Exception e2) {
                    e = e2;
                    SpiderDebug.log(e);
                    return str2;
                }
            }
            str3 = d3;
            str2 = str;
            jSONObject = jSONObject2;
            jSONObject3.put("vod_id", list2.get(0));
            jSONObject3.put("vod_name", s0);
            jSONObject3.put("vod_pic", tF);
            jSONObject3.put("type_name", obj);
            jSONObject3.put("vod_year", str4);
            jSONObject3.put("vod_area", str5);
            jSONObject3.put("vod_remarks", str6);
            jSONObject3.put("vod_actor", str7);
            jSONObject3.put("vod_director", str8);
            jSONObject3.put("vod_content", i2);
            TreeMap treeMap = new TreeMap(new 1(xinsj));
            OB = zH.OB("div.module-tab-content div span");
            uT OB3 = zH.OB("div.module-player-list");
            i = 0;
            while (i < OB.size()) {
                Object obj2;
                Object s03 = ((jC) OB.get(i)).s0();
                Iterator keys = xinsj.yq.keys();
                while (keys.hasNext()) {
                    s0 = (String) keys.next();
                    if (xinsj.yq.getJSONObject(s0).getString(d2).equals(s03)) {
                        s03 = xinsj.yq.getJSONObject(s0).getString(d2);
                        obj2 = 1;
                        break;
                    }
                }
                obj2 = null;
                if (obj2 != null) {
                    uT OB4 = ((jC) OB3.get(i)).OB("div.scroll-content a");
                    ArrayList arrayList2 = new ArrayList();
                    int i4 = 0;
                    while (i4 < OB4.size()) {
                        jC jCVar2 = (jC) OB4.get(i4);
                        Matcher matcher = xinsj.zH.matcher(jCVar2.tF("href"));
                        if (matcher.find()) {
                            StringBuilder stringBuilder4 = new StringBuilder();
                            stringBuilder4.append(matcher.group(1));
                            stringBuilder4.append(d);
                            stringBuilder4.append(matcher.group(2));
                            stringBuilder4.append(d);
                            stringBuilder4.append(matcher.group(3));
                            stringBuilder = stringBuilder4.toString();
                            str = jCVar2.OB("span").i();
                            StringBuilder stringBuilder5 = new StringBuilder();
                            stringBuilder5.append(str);
                            stringBuilder5.append("$");
                            stringBuilder5.append(stringBuilder);
                            arrayList2.add(stringBuilder5.toString());
                        }
                        i4++;
                        xinsj = this;
                    }
                    stringBuilder = arrayList2.size() > 0 ? TextUtils.join("#", arrayList2) : str2;
                    if (stringBuilder.length() != 0) {
                        treeMap.put(s03, stringBuilder);
                    }
                }
                i++;
                xinsj = this;
            }
            if (treeMap.size() > 0) {
                d = str3;
                stringBuilder = TextUtils.join(d, treeMap.keySet());
                String join = TextUtils.join(d, treeMap.values());
                jSONObject3.put("vod_play_from", stringBuilder);
                jSONObject3.put("vod_play_url", join);
            }
            JSONArray jSONArray = new JSONArray();
            jSONArray.put(jSONObject3);
            JSONObject jSONObject4 = jSONObject;
            jSONObject4.put("list", jSONArray);
            return jSONObject4.toString();
        } catch (Exception e3) {
            e = e3;
            str2 = str;
            SpiderDebug.log(e);
            return str2;
        }
    }

    public String homeContent(boolean z) {
        String d = "div.module-item-titlebox a";
        try {
            String d2;
            int i;
            String s0;
            String trim;
            String str = KJ;
            WU zH = W.zH(OkHttpUtil.string(str, getHeaders(str)));
            uT OB = zH.OB("ul.nav-menu-items>li.nav-menu-item>a");
            JSONArray jSONArray = new JSONArray();
            Iterator it = OB.iterator();
            while (true) {
                boolean hasNext = it.hasNext();
                d2 = "href";
                i = 0;
                if (!hasNext) {
                    break;
                }
                jC jCVar = (jC) it.next();
                s0 = jCVar.s0();
                if (s0.equals("电影") || s0.equals("电视剧") || s0.equals("动漫") || s0.equals("综艺")) {
                    i = 1;
                }
                if (i != 0) {
                    Matcher matcher = this.N.matcher(jCVar.tF(d2));
                    if (matcher.find()) {
                        trim = matcher.group(1).trim();
                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put("type_id", trim);
                        jSONObject.put("type_name", s0);
                        jSONArray.put(jSONObject);
                    }
                }
            }
            JSONObject jSONObject2 = new JSONObject();
            if (z) {
                jSONObject2.put("filters", this.SN);
            }
            jSONObject2.put("class", jSONArray);
            try {
                uT OB2 = ((jC) zH.OB("div.module-items").get(0)).OB("div.module-item");
                JSONArray jSONArray2 = new JSONArray();
                while (i < OB2.size()) {
                    jC jCVar2 = (jC) OB2.get(i);
                    trim = jCVar2.OB(d).yq("title");
                    s0 = jCVar2.OB("img.lazy lazyloaded").yq("data-src");
                    String i2 = jCVar2.OB("div.module-item-text").i();
                    Matcher matcher2 = this.tF.matcher(jCVar2.OB(d).yq(d2));
                    if (matcher2.find()) {
                        String group = matcher2.group(1);
                        JSONObject jSONObject3 = new JSONObject();
                        jSONObject3.put("vod_id", group);
                        jSONObject3.put("vod_name", trim);
                        jSONObject3.put("vod_pic", s0);
                        jSONObject3.put("vod_remarks", i2);
                        jSONArray2.put(jSONObject3);
                    }
                    i++;
                }
                jSONObject2.put("list", jSONArray2);
            } catch (Exception e) {
                SpiderDebug.log(e);
            }
            return jSONObject2.toString();
        } catch (Exception e2) {
            SpiderDebug.log(e2);
            return "";
        }
    }

    public void init(Context context) {
        super.init(context);
        try {
            this.yq = new JSONObject(
                    "{\"lgzx1\":{\"show\":\"蓝光专享1\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx2.idcdr.com/m3u81/?url=\"},\"lgzx\":{\"show\":\"蓝光专享2\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx2.idcdr.com/m3u81/?url=\"},\"6080_\":{\"show\":\"蓝光专享\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx2.idcdr.com/m3u81/?url=\"},\"ffm3u8\":{\"show\":\"极速-01\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"},\"lg1\":{\"show\":\"蓝光专线⑥\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/m3u8/?url=\"},\"1080zyk\":{\"show\":\"极速播放\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"},\"lg\":{\"show\":\"蓝光专线⑤\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/m3u8/?url=\"},\"qq\":{\"show\":\"TX节点\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"},\"sohu\":{\"show\":\"搜狐\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/111/444/?url=\"},\"youku\":{\"show\":\"YK节点\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"},\"bilibili\":{\"show\":\"bilibili\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/111/444/?url=\"},\"qiyi\":{\"show\":\"QY节点\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"},\"BYGA\":{\"show\":\"蓝光专线①\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/m3u8/?url=\"},\"xigua\":{\"show\":\"西瓜视频\",\"des\":\"\",\"ps\":\"1\",\"parse\":\"https://jx1.idcdr.com/111/444/?url=\"},\"lzm3u8\":{\"show\":\"在线观看\",\"des\":\"\",\"ps\":\"0\",\"parse\":\"https://jx1.idcdr.com/player/?url=\"}}");
            // this.SN = new
            // JSONObject(\"{\"1\":[{\"key\":0,\"name\":\"分类\",\"value\":[{\"n\":\"全部\",\"v\":\"4\"},{\"n\":\"动作片\",\"v\":\"6\"},{\"n\":\"喜剧\",\"v\":\"7\"},{\"n\":\"爱情\",\"v\":\"8\"},{\"n\":\"科幻\",\"v\":\"9\"},{\"n\":\"恐怖\",\"v\":\"10\"},{\"n\":\"剧情\",\"v\":\"11\"},{\"n\":\"战争\",\"v\":\"12\"},{\"n\":\"动画\",\"v\":\"23\"}]},{\"key\":3,\"name\":\"剧情\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n":\"警匪\",\"v\":\"警匪\"},{\"n\":\"犯罪\",\"v\":\"犯罪\"},{\"n\":\"动画\",\"v\":\"动画\"},{\"n\":\"奇幻\",\"v\":\"奇幻\"},{\"n\":\"武侠\",\"v\":\"武侠\"},{\"n\":\"冒险\",\"v\":\"冒险\"},{\"n\":\"枪战\",\"v\":\"枪战\"},{\"n\":\"恐怖\",\"v\":\"恐怖\"},{\"n\":\"悬疑\",\"v\":\"悬疑\"},{\"n\":\"惊悚\",\"v\":\"惊悚\"},{\"n\":\"经典\",\"v\":\"经典\"},{\"n\":\"青春\",\"v\":\"青春\"},{\"n\":\"文艺\",\"v\":\"文艺\"},{\"n\":\"微电影\",\"v\":\"微电影\"},{\"n\":\"古装\",\"v\":\"古装\"},{\"n\":\"历史\",\"v\":\"历史\"},{\"n\":\"运动\",\"v\":\"运动\"},{\"n\":\"农村\",\"v\":\"农村\"},{\"n\":\"儿童\",\"v\":\"儿童\"},{\"n\":\"网络电影\",\"v\":\"网络电影\"}]},{\"key\":1,\"name\":\"地区\",\"value\":[{\"n\":\"全部\",\"v\":\"\"},{\"n\":\"中国大陆\",\"v\":\"中国大陆\"},{\"n\":\"中国香港\",\"v\":\"中国香港\"},{\"n\":\"中国台湾\",\"v\":\"中国台湾\"},{\"n\":"韩国","v":"韩国"},{"n":"日本","v":"日本"},{"n":"美国","v":"美国"},{"n":"法国","v":"法国"},{"n":"英国","v":"英国"},{"n":"德国","v":"德国"},{"n":"泰国","v":"泰国"},{"n":"新加坡","v":"新加坡"},{"n":"马来西亚","v":"马来西亚"},{"n":"印度","v":"印度"},{"n":"法国","v":"法国"},{"n":"英国","v":"英国"},{"n":"德国","v":"德国"},{"n":"意大利","v":"意大利"},{"n":"西班牙","v":"西班牙"},{"n":"加拿大","v":"加拿大"},{"n":"其他","v":"其他"}]},{"key":11,"name":"年份","value":[{"n":"全部","v":""},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"}]},{"key":4,"name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"其它","v":"其它"}]},{"key":5,"name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"},{"n":"0-9","v":"0-9"}]},{"key":2,"name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],"2":[{"key":0,"name":"类型","value":[{"n":"全部","v":"2"},{"n":"港台剧","v":""},{"n":"国产剧","v":"13"},{"n":"港台剧","v":"14"},{"n":"日韩剧","v":"15"},{"n":"欧美剧","v":"16"},{"n":"纪录片","v":"21"},{"n":"泰国剧","v":"24"}]},{"key":3,"name":"剧情","value":[{"n":"全部","v":""},{"n":"古装","v":"古装"},{"n":"战争","v":"战争"},{"n":"青春偶像","v":"青春偶像"},{"n":"喜剧","v":"喜剧"},{"n":"家庭","v":"家庭"},{"n":"犯罪","v":"犯罪"},{"n":"动作","v":"动作"},{"n":"奇幻","v":"奇幻"},{"n":"剧情","v":"剧情"},{"n":"历史","v":"历史"},{"n":"经典","v":"经典"},{"n":"乡村","v":"乡村"},{"n":"情景","v":"情景"},{"n":"商战","v":"商战"},{"n":"网剧","v":"网剧"},{"n":"其他","v":"其他"}]},{"key":1,"name":"地区","value":[{"n":"全部","v":""},{"n":"中国大陆","v":"中国大陆"},{"n":"中国香港","v":"中国香港"},{"n":"中国台湾","v":"中国台湾"},{"n":"韩国","v":"韩国"},{"n":"日本","v":"日本"},{"n":"美国","v":"美国"},{"n":"法国","v":"法国"},{"n":"英国","v":"英国"},{"n":"德国","v":"德国"},{"n":"泰国","v":"泰国"},{"n":"新加坡","v":"新加坡"},{"n":"马来西亚","v":"马来西亚"},{"n":"印度","v":"印度"},{"n":"法国","v":"法国"},{"n":"英国","v":"英国"},{"n":"德国","v":"德国"},{"n":"意大利","v":"意大利"},{"n":"西班牙","v":"西班牙"},{"n":"加拿大","v":"加拿大"},{"n":"其他","v":"其他"}]},{"key":11,"name":"年份","value":[{"n":"全部","v":""},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"},{"n":"2009","v":"2009"},{"n":"2008","v":"2008"},{"n":"2007","v":"2007"},{"n":"2006","v":"2006"},{"n":"2005","v":"2005"},{"n":"2004","v":"2004"}]},{"key":4,"name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"其它","v":"其它"}]},{"key":5,"name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"},{"n":"0-9","v":"0-9"}]},{"key":2,"name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],"4":[{"key":3,"name":"剧情","value":[{"n":"全部","v":""},{"n":"情感","v":"情感"},{"n":"科幻","v":"科幻"},{"n":"热血","v":"热血"},{"n":"推理","v":"推理"},{"n":"搞笑","v":"搞笑"},{"n":"冒险","v":"冒险"},{"n":"萝莉","v":"萝莉"},{"n":"校园","v":"校园"},{"n":"动作","v":"动作"},{"n":"机战","v":"机战"},{"n":"运动","v":"运动"},{"n":"战争","v":"战争"},{"n":"少年","v":"少年"},{"n":"少女","v":"少女"},{"n":"社会","v":"社会"},{"n":"原创","v":"原创"},{"n":"亲子","v":"亲子"},{"n":"益智","v":"益智"},{"n":"其他","v":"其他"}]},{"key":1,"name":"地区","value":[{"n":"全部","v":""},{"n":"中国","v":"中国"},{"n":"日本","v":"日本"},{"n":"欧美","v":"欧美"},{"n":"其他","v":"其他"}]},{"key":11,"name":"年份","value":[{"n":"全部","v":""},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"},{"n":"2009","v":"2009"},{"n":"2008","v":"2008"},{"n":"2007","v":"2007"},{"n":"2006","v":"2006"},{"n":"2005","v":"2005"},{"n":"2004","v":"2004"},{"n":"2003","v":"2003"},{"n":"2002","v":"2002"},{"n":"2001","v":"2001"},{"n":"2000","v":"2000"}]},{"key":2,"name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}]}");
            this.SN = new JSONObject("{}");
        } catch (JSONException e) {
            SpiderDebug.log(e);
        }
    }

    public void init(Context context, String str) {
        super.init(context, str);
        if (!TextUtils.isEmpty(str)) {
            KJ = str;
        }
    }

    public String searchContent(String str, boolean z) {
        String str2 = "";
        try {
            long currentTimeMillis = System.currentTimeMillis();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(KJ);
            stringBuilder.append("/index.php/ajax/suggest?mid=1&wd=");
            stringBuilder.append(URLEncoder.encode(str));
            stringBuilder.append("&limit=35&timestamp=");
            stringBuilder.append(currentTimeMillis);
            str = stringBuilder.toString();
            JSONObject jSONObject = new JSONObject(OkHttpUtil.string(str, getHeaders(str)));
            JSONObject jSONObject2 = new JSONObject();
            JSONArray jSONArray = new JSONArray();
            int i = jSONObject.getInt("total");
            String d = "list";
            if (i > 0) {
                JSONArray jSONObject3 = new JSONObject(jSONObject.getString(d));
                for (int i2 = 0; i2 < jSONObject3.length(); i2++) {
                    JSONObject jSONObject4 = jSONObject3.getJSONObject(i2);
                    String string = jSONObject4.getString("id");
                    String string2 = jSONObject4.getString("name");
                    String string3 = jSONObject4.getString("pic");
                    JSONObject jSONObject5 = new JSONObject();
                    jSONObject5.put("vod_id", string);
                    jSONObject5.put("vod_name", string2);
                    jSONObject5.put("vod_pic", string3);
                    jSONObject5.put("vod_remarks", str2);
                    jSONArray.put(jSONObject5);
                }
            }
            jSONObject2.put(d, jSONArray);
            return jSONObject2.toString();
        } catch (Exception e) {
            SpiderDebug.log(e);
            return str2;
        }
    }

    public static HashMap<String, String> yq(String str, String str2, String str3, String str4) {
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put(str, str2);
        hashMap.put(str3, str4);
        return hashMap;
    }
}
